import 'package:flutter/material.dart';
import 'package:flutter_rating_bar/flutter_rating_bar.dart';
import 'package:android_basic/models/review.dart';

class ReviewPanel extends StatefulWidget {
  final List<Review> reviews;
  final bool isLoading;
  final Function(Review) onSubmit;
  final Map<String, dynamic>? ratingStats;

  const ReviewPanel({
    Key? key,
    required this.reviews,
    required this.isLoading,
    required this.onSubmit,
    required this.ratingStats,
  }) : super(key: key);

  @override
  _ReviewPanelState createState() => _ReviewPanelState();
}

class _ReviewPanelState extends State<ReviewPanel> {
  double _userRating = 0;
  final TextEditingController _commentController = TextEditingController();
  bool _isSubmitting = false;

  @override
  void dispose() {
    _commentController.dispose();
    super.dispose();
  }

  void _handleSubmit() {
    if (_userRating == 0 || _commentController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Vui l√≤ng ch·ªçn s·ªë sao v√† nh·∫≠p b√¨nh lu·∫≠n')),
      );
      return;
    }

    final newReview = Review(
      id: 0, // g√°n t·∫°m, n·∫øu c√≥ API s·∫Ω c·∫≠p nh·∫≠t l·∫°i sau
      userId: 0, // tu·ª≥ b·∫°n l·∫•y userId th·ª±c t·∫ø
      userName: 'B·∫°n',
      courseId: widget.reviews.isNotEmpty ? widget.reviews.first.courseId : 0,
      rating: _userRating.toInt(),
      comment: _commentController.text.trim(),
      createdAt: DateTime.now().toIso8601String(),
      isVerified: true,
      helpfulCount: 0,
    );

    widget.onSubmit(newReview);

    setState(() {
      _userRating = 0;
      _commentController.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        FocusScope.of(context).unfocus(); // üëâ ·∫®n b√†n ph√≠m khi tap ra ngo√†i
      },
      child: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildRatingOverview(widget.ratingStats),
            const SizedBox(height: 24),
            _buildReviewForm(), // Nh·∫≠p ƒë√°nh gi√° + g·ª≠i
            const SizedBox(height: 32),
            Text(
              'ƒê√°nh gi√° t·ª´ h·ªçc vi√™n',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            widget.isLoading
                ? Center(child: CircularProgressIndicator())
                : widget.reviews.isEmpty
                ? Text('Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.')
                : Column(
                  children:
                      widget.reviews
                          .map((review) => _buildReviewItem(review))
                          .toList(),
                ),
          ],
        ),
      ),
    );
  }

  Widget _buildReviewItem(Review review) {
    return Container(
      padding: const EdgeInsets.all(16),
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.grey[300]!),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              CircleAvatar(
                radius: 20,
                backgroundColor: Colors.grey[300],
                child: Icon(Icons.person),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      review.userName ?? '',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Row(
                      children: [
                        ...List.generate(
                          review.rating ?? 0,
                          (index) =>
                              Icon(Icons.star, color: Colors.amber, size: 16),
                        ),
                        ...List.generate(
                          5 - (review.rating ?? 0),
                          (index) => Icon(
                            Icons.star_border,
                            color: Colors.grey,
                            size: 16,
                          ),
                        ),
                        const SizedBox(width: 8),
                        Text(
                          _formatTimeAgo(review.createdAt ?? ''),
                          style: TextStyle(color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 12),
          Text(review.comment ?? ''),
        ],
      ),
    );
  }

  Widget _buildReviewForm() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'ƒê√°nh gi√° kh√≥a h·ªçc',
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
        ),
        const SizedBox(height: 8),
        RatingBar.builder(
          initialRating: _userRating,
          minRating: 1,
          direction: Axis.horizontal,
          allowHalfRating: false,
          itemCount: 5,
          itemPadding: EdgeInsets.symmetric(horizontal: 4.0),
          itemBuilder: (context, _) => Icon(Icons.star, color: Colors.amber),
          onRatingUpdate: (rating) {
            setState(() {
              _userRating = rating;
            });
          },
        ),
        const SizedBox(height: 12),
        TextField(
          controller: _commentController,
          maxLines: 3,
          decoration: InputDecoration(
            hintText: 'Nh·∫≠p ƒë√°nh gi√° c·ªßa b·∫°n...',
            border: OutlineInputBorder(),
          ),
        ),
        const SizedBox(height: 12),
        _isSubmitting
            ? Center(child: CircularProgressIndicator())
            : ElevatedButton(
              onPressed: _handleSubmit,
              child: Text('G·ª≠i ƒë√°nh gi√°'),
            ),
      ],
    );
  }

  Widget _buildRatingOverview(Map<String, dynamic>? stats) {
    // B·∫°n c√≥ th·ªÉ render bi·ªÉu ƒë·ªì c·ªôt, trung b√¨nh sao ·ªü ƒë√¢y
    return Text("T·ªïng quan ƒë√°nh gi√°: ‚≠ê‚≠ê‚≠ê‚≠ê‚òÜ (gi·∫£ l·∫≠p)");
  }

  String _formatTimeAgo(String dateTimeString) {
    try {
      final time = DateTime.parse(dateTimeString);
      final diff = DateTime.now().difference(time);
      if (diff.inMinutes < 60) return '${diff.inMinutes} ph√∫t tr∆∞·ªõc';
      if (diff.inHours < 24) return '${diff.inHours} gi·ªù tr∆∞·ªõc';
      return '${diff.inDays} ng√†y tr∆∞·ªõc';
    } catch (_) {
      return '';
    }
  }
}
